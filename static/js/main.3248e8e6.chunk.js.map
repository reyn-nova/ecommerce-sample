{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","id","text","products","imageURL","name","socialMediaOptions","URL","className","map","item","index","href","key","style","marginLeft","alt","src","placeholder","rel","target","height","objectFit","width","marginTop","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAEMA,EAAU,CACd,CACEC,GAAI,EACJC,KAAM,YAER,CACED,GAAI,EACJC,KAAM,aAIJC,EAAW,CACf,CACEF,GAAI,EACJG,SAAU,8GACVC,KAAM,aAER,CACEJ,GAAI,EACJG,SAAU,wIACVC,KAAM,aAER,CACEJ,GAAI,EACJG,SAAU,qIACVC,KAAM,cAIJC,EAAqB,CACzB,CACEL,GAAI,EACJG,SAAU,iGACVC,KAAM,WACNE,IAAK,wBAEP,CACEN,GAAI,EACJG,SAAU,uHACVC,KAAM,YACNE,IAAK,yBAEP,CACEN,GAAI,EACJG,SAAU,qFACVC,KAAM,WACNE,IAAK,wBAEP,CACEN,GAAI,EACJG,SAAU,2GACVC,KAAM,WACNE,IAAK,yB,yKAML,OACE,yBACEC,UAAY,aAEZ,yBACEA,UAAY,kBAEZ,uBACEA,UAAY,wBADd,oBAMA,yBACEA,UAAY,oCAGVR,EAAQS,KAAI,SAACC,EAAMC,GACjB,OACE,uBACEH,UAAY,wBACZI,KAAO,KACPC,IAAOH,EAAKT,GACZa,MAAS,CACPC,WAAsB,IAAVJ,EAAc,EAAI,KAG/BD,EAAKR,WAQlB,yBACEM,UAAY,eAEZ,yBACEQ,IAAM,yBACNR,UAAY,+BACZS,IAAM,2IAGR,yBACET,UAAY,qBAEZ,uBACEA,UAAY,cADd,gBAMA,yBACEA,UAAY,mBAEZ,2BACEA,UAAY,aACZU,YAAc,8BAGhB,uBACEV,UAAY,gBACZI,KAAO,MAFT,SAUN,yBACEJ,UAAY,sBAEZ,uBACEA,UAAY,kBADd,gBAMA,yBACEA,UAAY,0BAGVL,EAASM,KAAI,SAAAC,GACX,OACE,uBACEF,UAAY,oBACZI,KAAO,KACPC,IAAOH,EAAKT,IAEZ,yBACEe,IAAG,eAAYN,EAAKT,IACpBO,UAAY,gBACZS,IAAOP,EAAKN,WAGd,uBACEI,UAAY,gBAEXE,EAAKL,YASpB,yBACEG,UAAY,oBAEZ,uBACEA,UAAY,oBADd,2BAMA,yBACEA,UAAY,sBAGVF,EAAmBG,KAAI,SAAAC,GACrB,OACE,uBACEF,UAAY,oBACZI,KAAQF,EAAKH,IACbM,IAAOH,EAAKT,GACZkB,IAAM,sBACNC,OAAS,UAET,yBACEJ,IAAON,EAAKL,KAAO,QACnBY,IAAOP,EAAKN,SACZU,MAAS,CACPO,OAAQ,GACRC,UAAW,UACXC,MAAO,MAIX,uBACET,MAAS,CACPU,UAAW,KAGZd,EAAKL,iB,GApJCoB,IAAMC,WC9CfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3248e8e6.chunk.js","sourcesContent":["import React from 'react'\n\nconst options = [\n  {\n    id: 0,\n    text: 'Option 1'\n  },\n  {\n    id: 1,\n    text: 'Option 2'\n  }\n]\n\nconst products = [\n  {\n    id: 0,\n    imageURL: 'https://images.unsplash.com/photo-1583183634411-47514a69722c?ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\n    name: 'Product 1'\n  },\n  {\n    id: 1,\n    imageURL: 'https://images.unsplash.com/photo-1588413335672-87b35888b55d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80',\n    name: 'Product 2'\n  },\n  {\n    id: 2,\n    imageURL: 'https://images.unsplash.com/photo-1548329408-0bcd6e68058d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80',\n    name: 'Product 3'\n  }\n]\n\nconst socialMediaOptions = [\n  {\n    id: 0,\n    imageURL: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/1021px-WhatsApp.svg.png',\n    name: 'WhatsApp',\n    URL: 'https://whatsapp.com'\n  },\n  {\n    id: 1,\n    imageURL: 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/1024px-Instagram_logo_2016.svg.png',\n    name: 'Instagram',\n    URL: 'https://instagram.com'\n  },\n  {\n    id: 2,\n    imageURL: 'https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg',\n    name: 'Facebook',\n    URL: 'https://facebook.com'\n  },\n  {\n    id: 3,\n    imageURL: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Telegram_logo.svg/1024px-Telegram_logo.svg.png',\n    name: 'Telegram',\n    URL: 'https://telegram.com'\n  }\n]\n\nexport default class extends React.Component {\n  render() {\n    return (\n      <div\n        className = 'container'\n      >\n        <div\n          className = 'top-navigation'\n        >\n          <p\n            className = 'top-navigation-title'\n          >\n            Ecommerce Sample\n          </p>\n\n          <div\n            className = 'top-navigation-options-container'\n          >\n            {\n              options.map((item, index) => {\n                return (\n                  <a\n                    className = 'top-navigation-option'\n                    href = '/#'\n                    key = {item.id}\n                    style = {{\n                      marginLeft: index === 0 ? 0 : 20\n                    }}\n                  >\n                    {item.text}\n                  </a>\n                )\n              })\n            }\n          </div>\n        </div>\n\n        <div\n          className = 'hello-panel'\n        >\n          <img\n            alt = 'hello-panel-background'\n            className = 'hello-panel-background-image'\n            src = 'https://images.unsplash.com/photo-1511018556340-d16986a1c194?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80'\n          />\n\n          <div\n            className = 'hello-front-panel'\n          >\n            <p\n              className = 'hello-text'\n            >\n              Hello There!\n            </p>\n\n            <div\n              className = 'input-container'\n            >\n              <input\n                className = 'main-input'\n                placeholder = 'Start search something...'\n              />\n\n              <a\n                className = 'main-input-go'\n                href = '/#'\n              >\n                Go\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div\n          className = 'products-container'\n        >\n          <p\n            className = 'products-title'\n          >\n            Our Products\n          </p>\n\n          <div\n            className = 'product-list-container'\n          >\n            {\n              products.map(item => {\n                return (\n                  <a\n                    className = 'product-container'\n                    href = '/#'\n                    key = {item.id}\n                  >\n                    <img\n                      alt = {`item-${item.id}`}\n                      className = 'product-image'\n                      src = {item.imageURL}\n                    />\n\n                    <p\n                      className = 'product-name'\n                    >\n                      {item.name}\n                    </p>\n                  </a>\n                )\n              })\n            }\n          </div>\n        </div>\n\n        <div\n          className = 'contact-us-panel'\n        >\n          <p\n            className = 'contact-us-title'\n          >\n            Get In Touch With Us...\n          </p>\n\n          <div\n            className = 'contact-us-options'\n          >\n            {\n              socialMediaOptions.map(item => {\n                return (\n                  <a\n                    className = 'contact-us-option'\n                    href = {item.URL}\n                    key = {item.id}\n                    rel = 'noopener noreferrer'\n                    target = '_blank'\n                  >\n                    <img\n                      alt = {item.name + ' logo'}\n                      src = {item.imageURL}\n                      style = {{\n                        height: 40,\n                        objectFit: 'contain',\n                        width: 40\n                      }}\n                    />\n                  \n                    <p\n                      style = {{\n                        marginTop: 10\n                      }}\n                    >\n                      {item.name}\n                    </p>\n                  </a>\n                )\n              })\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}